{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nomad Ops","text":"<p>This application brings Gitops to the nomad world. In short:</p> <p>Your manifests of what should be deployed live in one or multiple git-repositories and the application makes sure to synchronize your desired state with the nomad cluster.</p> <p></p> <p>Source: https://codefresh.io/wp-content/uploads/2022/03/Codefresh-GitOps.jpeg</p>"},{"location":"#ui","title":"UI","text":"<p>Nomad Ops comes with an integrated (simple) UI to onboard new repositories.</p> <p></p> <p></p>"},{"location":"#notifications","title":"Notifications","text":"<p>Nomad Ops is able to notify whenever the <code>current state</code> was changed.</p> <p>The following notification channels are available.</p>"},{"location":"#slack","title":"Slack","text":"<p>TODO: link config</p>"},{"location":"#webhook","title":"Webhook","text":"<p>Coming soon</p>"},{"location":"Getting%20Started/","title":"Getting Started","text":""},{"location":"Getting%20Started/#getting-started-with-docker","title":"Getting started with docker","text":"<p>You need nomad and docker installed on your system</p> <ol> <li>Clone the repo</li> <li>Start 2 terminal sessions at the root of this repo</li> </ol> <p>Run the following in the first terminal:</p> <p>Make sure that docker volumes are available You can use the provided <code>.deployment/nomad/agent.hcl</code> as a reference</p> <p><code>nomad agent -dev -bind 0.0.0.0 -log-level INFO -config .deployment/nomad/agent.hcl</code></p> <p>This will bring up a nomad environment with docker volumes enabled. See nomad docs for more info.</p> <p>Run the following in the second terminal:</p> <p><code>nomad namespace apply nomad-ops</code></p> <p>This makes sure that the namespace nomad-ops exists.</p> <p>Deploy Nomad-Ops to nomad by running:</p> <p><code>nomad job run .deployment/nomad/docker.hcl</code></p> <p>Go to http://localhost:8080/_/. This will bring you to the login screen of pocketbase. Login using <code>admin@nomad-ops.org</code> and <code>simple-nomad-ops</code>.</p> <p>Once you are logged in, you are able to create your first normal user. Just hit <code>+ New Record</code> for the <code>User</code> collection and fill out the form. Afterwards you can access the UI of Nomad-Ops at http://localhost:8080/ and use your newly created credentials to login.</p> <p>The Admin User <code>admin@nomad-ops.org</code> is only capable to access the pocketbase ui at <code>http://{your-nomad-ops-host}/_/</code>. To access the Nomad-Ops UI you need to create a normal user first.</p>"},{"location":"Getting%20Started/#installation-notes","title":"Installation Notes","text":"<p>Nomad Ops can be installed inside or outside of your nomad-cluster.</p> <p>If you install Nomad Ops inside your cluster you can leverage the Workload Identities of Nomad v1.5.x.</p> <p>Keep in mind that Nomad Ops stores its data on the local file system. Please use a NFS-mount or similar to enable scheduling around the cluster.</p> <p>For a simple deployment, consider restricting the deployment to a specific node.</p>"},{"location":"Getting%20Started/#configuration","title":"Configuration","text":"ENVIRONMENT Variable Default Description DEFAULT_ADMIN_EMAIL admin@nomad-ops.org On first startup an admin user is created with this email DEFAULT_ADMIN_PASSWORD simple-nomad-ops On first startup an admin user is created with this password NOMAD_ADDR '' Nomad addr NOMAD_TOKEN '' Nomad token to access the Nomad API NOMAD_TOKEN_FILE '' If set will ignore NOMAD_TOKEN and read from this file instead TRACE FALSE If set to <code>TRUE</code> enables detailed logging SLACK_WEBHOOK_URL '' Set to your Webhook URL if you want to receive notifications about deployments SLACK_BASE_URL 'localhost:3000/ui/' included in the slack message as a link SLACK_ICON_SUCCESS ':check:' Icon to use for successful deployments SLACK_ICON_ERROR ':check-no:' Icon to use for unsuccessful deployments SLACK_ENV_INFO_TEXT 'Sent by nomad-ops (dev)' Send as a footer in the slack message <p>There are a couple of Pocketbase settings that you can set as well. See here.</p>"},{"location":"Getting%20Started/#email-settings","title":"Email Settings","text":"<p>Pocketbase integrates a couple of workflows for user management (confirmation, password reset, ...). To use that please adjust the environment variables according to the docs. See here for the corresponding environment variables in Nomad-Ops.</p>"},{"location":"Getting%20Started/#security","title":"Security","text":"<p>Deploy keys are saved in plain text. Please make sure that the application is only accessible by authorized personnel. This includes setting up TLS, users and a hardened runtime-environment.</p>"},{"location":"Getting%20Started/#workflow","title":"Workflow","text":"<p>Nomad Ops pulls the <code>desired state</code> from a git-repository on a regular basis. Additionally, certain events trigger a re-evaluation of the state as well.</p> <p>After the <code>desired state</code> has been fetched, the <code>current state</code> is queried from the <code>nomad</code>-cluster. The <code>reconciler</code> performs the necessary steps to bring the <code>cluster state</code> closer to the <code>desired state</code> by adding, updating or deleting jobs.</p>"},{"location":"Getting%20Started/#user-management","title":"User management","text":"<p>Users are currently managed by the admin interface of pocketbase</p>"},{"location":"Getting%20Started/#restrictions","title":"Restrictions","text":"<p>Nomad Ops does not perform any templating or rendering and expects the manifests in the repository to be <code>ready-to-run</code>. Adjust your CI/CD pipeline to include the rendering step before you commit the file in the repository. </p> <p>Do not store secrets in plain text in your repository. Consult the nomad docs on best practices to provide secrets to your jobs.</p>"}]}